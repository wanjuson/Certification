1장 요구사항확인
1.1 소프트웨어 생명주기 모형
 - 소프트웨어의 개발 및 운용, 유지보수 등의 각 단계를 진행하는 것
 - 소프트웨어의 생성부터 소멸까지 변환되는 과정

ㅇ S/W 생명주기 단계
 타당성 검토 > 계획 > 분석 > 설계 > 구현 > 테스트 > 운용 > 유지보수

1.2 전통적 SDLC 모형
1) 폭포수 모형
전통적인 생명주기 모형으로 각 단계를 순차적으로 진행하고 단계별 마무리가 되어야 다음 단계로 진행하는 방식
 - 장점 : 순차적으로 소프트웨어를 개발하는 전통적 모형. 사용사례와 성공사례가 많음
  각 단계별 정의와 활동이 분명하고 단계별 산출물이 명확함
 - 단점 : 개발과정에서 발생하는 사용자 요구사항의 반영이 어려움
  단계별 오류없이 다음 단계로 진행하는 것이 불가능함.

2) 프로토타입 모형
개발중인 소프트웨어에 대한 시제품을 만들어 제공하는 방식
요구분석 > 프로토타입 설계 > 구축 > 고객평가 > 프로토타입 정제 > 완제품 구현
- 장점 : 사용자 요구사항 반영이 용이함
의뢰자가 최종 결과물이 나오기 전에 결과물의 일부나 모형을 볼 수 있음
개발자나 의뢰자 모두에게 공동 참조 모델 제공함
개발단계에서 오류 수정이 가능함
- 단점 : 미리 개발된 소프트웨어를 사용할 경우, 실제와 차이가 발생할 수 있음
단기간에 개발되어야 하기 때문에 비효율적인 언어, 알고리즘을 사용할 수 있음

3) 나선형 모형
 - 폭포수 모형과 프로토타입 모형의 장점을 반영
 - 분석 단계에 위험 분석 기능을 추가하여 위험 관리 가능
 - 소프트웨어 개발과정을 반복하여 최종 소프트웨어를 개발하는 것으로 점진적 모형이라고 함
 > 개발단계 : 계획수립, 위험분석, 고객평가, 개발
위험분석 > 계획수립 > 고객평가 > 개발
대형시스템 개발에 많이 사용함

1.3 애자일 SDLC 모형
- 고객의 요구 변화에 민첩하게 대응하여 짧은 주기로 개발을 반복하는 모형
- 각 주기마다 생성되는 결과물을 점증적으로 개발하여 최종 시스템 완성
- XP(익스트림 프로그래밍), 스크럼, 칸반, 기능 중심 개발 등이 대표적 모형

ㅁ 애자일 모형이 추구하는 핵심가치
- 프로세스나 도구보다는 개인과 상호작용에 더 가치를 둠
- 포괄적인 문서보다는 작동하는 소프트웨어에 더 가치를 둠
- 계약 협상보다 고객과의 협업에 더 가치를 둠
- 계획 따르기보다는 변화의 대응에 더 가치를 둠

1) XP(익스트림 프로그래밍)
고객의 참여와 개발과정의 반복을 극대화하는 방법
소규모 개발 조직이 불확실하고 요구 변경이 많을때 적절한 애자일 모형
릴리즈 기간을 짧게 반복하고 고객 참여로 릴리즈 테스트를 수행
ㅁ XP의 5가지 핵심가치
 - 의사소통, 단순성, 용기, 존중, 피드백

ㅁ XP 주요 실천방안
 - 짝 프로그래밍 : 다른 사람과 함께 프로그래밍을 수행함으로써 개발에 대한 책임을 공동으로 나눠갖는 환경을 조성
 - 공동 코드 소유
 - 테스트 주도 개발 : 지속적 테스트 진행을 위해 자동화된 테스팅 도구(구조, 프레임워크) 사용
 - 전체팀 
 - 계속적 통합 : 모듈 단위로 나눠서 개발된 코드들은 하나의 작업이 마무리될때마다 지속적으로 통합됨
 - 리팩토링 : 프로그램 기능을 변경하지 않고 중복코드제거, 단순화, 유연성 강화등을 통해 시스템을 재구성
 - 소규모 릴리즈 : 릴리즈 기간을 짧게 반복하여 고객 요구 변화에 신속 대응

2) 스크럼
- 개발팀이 중심이 되어 짧은 주기를 반복하여 소프트웨어를 개발하는 모형
(1) 스크럼 팀 구성원과 역활
- 제품 책임자(PO) : 제품에 대한 요구사항을 작성하는 주체, 제품 백로그 작성, 우선순위 지정
- 스크럼 마스터 : 스크림 수행 가이드 역할, 개발 과정의 장애요소를 공론화하여 처리
(2) 스크럼 개발 구성요소
- 제품 백로그 : 제품이 제공해야 하는 모든 요구사항을 우선 순위에 따라 나열한 목혹
- 스프린트 계획 회의 : 제품 백로그 중 해당 스프린트에서 수행할 작업의 단기 일정을 수립
. 사용자 스토리를 개발할 TASK를 분할 수 개발자 별 작업 목록인 스프린트 백로그 작성

ㅁ 스프린트 계획 과정
 1. 스프린트 백로그 작성
 2. 타스트 상태 관리
  - 스크럼 마스터는 개발자에게 작업 할당
  - 개발자는 담당하는 타스트에 대한 진행 상황을 기록하고 팀원과 공유

ㅁ 일일 스크럼 회의
 - 매일 약속된 시간에 모든 팀원이 모여 진행 상황을 공유하는 회의
 - 번다운 차트(링정)
ㅁ 스프린트 검토 회의
 - 완성된 제품이 요구사항에 부합되는지 사용자 참석하에 테스트
 - 제품 책임자는 개선 사항에 대해 피드백 정리 후 제품 백로그를 업데이트
ㅁ 스프린트 회고
 - 스프린트 주기를 되돌아 보며 규칙을 준수했는지 좋았던점, 문제점, 개선점은 없는지 확인

* 학습내용 정리
01. 소프트웨어 생명주기 : 소프트웨어가 생성부터 소멸까지 변환되는 과정
02. 폭포수 모형 : 고전적인 순차적 개발 모형
03. 프로토타입 모형 : 시제품을 만들어 사용자 요구사항 반영
04. 나선형 모형 : 점증적으로 개발하는 모형으로 위험 분석 포함
05. 애자일 모형 : 고객 요구 변화에 빠르게 대응하면서 개발
 XP, 스크럼 개발 모형이 대표적임



































































